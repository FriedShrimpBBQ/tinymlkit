// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package linear_model_schema

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEf0b8645DecodeTinymlkitSchemasLinearModel(in *jlexer.Lexer, out *LinearModelOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Penalty":
			out.Penalty = string(in.String())
		case "Alpha":
			out.Alpha = float64(in.Float64())
		case "L1Ratio":
			out.L1Ratio = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEf0b8645EncodeTinymlkitSchemasLinearModel(out *jwriter.Writer, in LinearModelOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Penalty\":"
		out.RawString(prefix[1:])
		out.String(string(in.Penalty))
	}
	{
		const prefix string = ",\"Alpha\":"
		out.RawString(prefix)
		out.Float64(float64(in.Alpha))
	}
	{
		const prefix string = ",\"L1Ratio\":"
		out.RawString(prefix)
		out.Float64(float64(in.L1Ratio))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinearModelOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEf0b8645EncodeTinymlkitSchemasLinearModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinearModelOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEf0b8645EncodeTinymlkitSchemasLinearModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinearModelOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEf0b8645DecodeTinymlkitSchemasLinearModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinearModelOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEf0b8645DecodeTinymlkitSchemasLinearModel(l, v)
}
func easyjsonEf0b8645DecodeTinymlkitSchemasLinearModel1(in *jlexer.Lexer, out *LinearModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Coefficient":
			if in.IsNull() {
				in.Skip()
				out.Coefficient = nil
			} else {
				in.Delim('[')
				if out.Coefficient == nil {
					if !in.IsDelim(']') {
						out.Coefficient = make([]float64, 0, 8)
					} else {
						out.Coefficient = []float64{}
					}
				} else {
					out.Coefficient = (out.Coefficient)[:0]
				}
				for !in.IsDelim(']') {
					var v1 float64
					v1 = float64(in.Float64())
					out.Coefficient = append(out.Coefficient, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Intercept":
			out.Intercept = float64(in.Float64())
		case "Simplex":
			if in.IsNull() {
				in.Skip()
				out.Simplex = nil
			} else {
				in.Delim('[')
				if out.Simplex == nil {
					if !in.IsDelim(']') {
						out.Simplex = make([][]float64, 0, 2)
					} else {
						out.Simplex = [][]float64{}
					}
				} else {
					out.Simplex = (out.Simplex)[:0]
				}
				for !in.IsDelim(']') {
					var v2 []float64
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make([]float64, 0, 8)
							} else {
								v2 = []float64{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 float64
							v3 = float64(in.Float64())
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Simplex = append(out.Simplex, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SimplexLabels":
			if in.IsNull() {
				in.Skip()
				out.SimplexLabels = nil
			} else {
				in.Delim('[')
				if out.SimplexLabels == nil {
					if !in.IsDelim(']') {
						out.SimplexLabels = make([]float64, 0, 8)
					} else {
						out.SimplexLabels = []float64{}
					}
				} else {
					out.SimplexLabels = (out.SimplexLabels)[:0]
				}
				for !in.IsDelim(']') {
					var v4 float64
					v4 = float64(in.Float64())
					out.SimplexLabels = append(out.SimplexLabels, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Options":
			(out.Options).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEf0b8645EncodeTinymlkitSchemasLinearModel1(out *jwriter.Writer, in LinearModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Coefficient\":"
		out.RawString(prefix[1:])
		if in.Coefficient == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Coefficient {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Intercept\":"
		out.RawString(prefix)
		out.Float64(float64(in.Intercept))
	}
	{
		const prefix string = ",\"Simplex\":"
		out.RawString(prefix)
		if in.Simplex == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Simplex {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v9, v10 := range v8 {
						if v9 > 0 {
							out.RawByte(',')
						}
						out.Float64(float64(v10))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SimplexLabels\":"
		out.RawString(prefix)
		if in.SimplexLabels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.SimplexLabels {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Options\":"
		out.RawString(prefix)
		(in.Options).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinearModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEf0b8645EncodeTinymlkitSchemasLinearModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinearModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEf0b8645EncodeTinymlkitSchemasLinearModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinearModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEf0b8645DecodeTinymlkitSchemasLinearModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinearModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEf0b8645DecodeTinymlkitSchemasLinearModel1(l, v)
}
